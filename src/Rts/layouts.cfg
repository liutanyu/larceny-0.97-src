; Copyright 1998 Lars T Hansen.                 -*- Scheme -*-
;
; $Id: layouts.cfg 5215 2007-12-15 06:27:47Z will $
; 
; Configuration file for data structure layouts, tags, and everything else
; on the bit level.

(define-files
  "layouts.ch"
  "layouts.ah"
  "layouts.sch")

; Tag stuff

(define-const tagmask      #x07 "TAG_MASK" "TAGMASK" "$tag.tagmask")
(define-const typetag-mask #x1C "TYPETAG_MASK" "TYPETAG_MASK" #f)
(define-const fixtagmask   #x03  #f "fixtag_mask" "$tag.fixtagmask")

(define-const fix1-tag     #x00 "FIX1_TAG" "FIX1_TAG" #f)
(define-const fix2-tag     #x04 "FIX2_TAG" "FIX2_TAG" #f)
(define-const imm1-tag     #x02 "IMM1_TAG" "IMM1_TAG" #f)
(define-const imm2-tag     #x06 "IMM2_TAG" "IMM2_TAG" #f)
(define-const pair-tag     #x01 "PAIR_TAG" "PAIR_TAG" "$tag.pair-tag")
(define-const vec-tag      #x03 "VEC_TAG"  "VEC_TAG"  "$tag.vector-tag")
(define-const bvec-tag     #x05 "BVEC_TAG" "BVEC_TAG" "$tag.bytevector-tag")
(define-const proc-tag     #x07 "PROC_TAG" "PROC_TAG" "$tag.procedure-tag")

; Header tags and other immediates

(define-const res-hdr     #x82 "RES_HDR"  "RES_HDR" #f) ; reserved
(define-const vec-hdr     #xA2 "VEC_HDR"  "VEC_HDR" "$imm.vector-header")
(define-const bv-hdr      #xC2 "BV_HDR"   "BV_HDR"  "$imm.bytevector-header")
(define-const proc-hdr    #xFE "PROC_HDR" "PROC_HDR" "$imm.procedure-header")
(define-const true        #x00000006 "TRUE_CONST" "TRUE_CONST" "$imm.true")
(define-const false       #x00000002 "FALSE_CONST" "FALSE_CONST" "$imm.false")
(define-const nil         #x0000000A "NIL_CONST" "NIL_CONST" "$imm.null")
(define-const misc        #x00000016 "MISC_CONST" "MISC_CONST" "$imm.misc")
(define-const unspecified #x00000116 "UNSPECIFIED_CONST" "UNSPECIFIED_CONST" "$imm.unspecified")
(define-const eof         #x00000216 "EOF_CONST" "EOF_CONST" "$imm.eof")
(define-const undefined   #x00000316 "UNDEFINED_CONST" "UNDEFINED_CONST" "$imm.undefined")
(define-const fasl        #x00000416 "FASL_CONST" "FASL_CONST" "$imm.fasl")
(define-const character   #x00000026 "IMM_CHAR" "IMM_CHAR" "$imm.character")


; subtags which go in the 'xxx' field sin the low bytes of a vector or 
; bytevector header, and are picked from the following set of values:
;
;  #x00, #x04, #x08, #x0C, #x10, #x14, #x18, #x1C

; subtags for vector headers

(define-const vec-subtag   #x00 "VEC_SUBTAG" "VEC_SUBTAG" "$tag.vector-typetag")
(define-const cont-subtag  vec-subtag "CONT_SUBTAG" "CONT_SUBTAG" #f)
(define-const rect-subtag  #x04 "RECT_SUBTAG" "RECT_SUBTAG" "$tag.rectnum-typetag")
(define-const rat-subtag   #x08 "RAT_SUBTAG" "RAT_SUBTAG" "$tag.ratnum-typetag")
(define-const sym-subtag   #x0C "SYM_SUBTAG" "SYM_SUBTAG" "$tag.symbol-typetag")
(define-const port-subtag  #x10 #f #f "$tag.port-typetag")
(define-const struct-subtag #x14 
  "STRUCT_SUBTAG" "STRUCT_SUBTAG" "$tag.structure-typetag")

; subtags for bytevector headers

(define-const bvec-subtag  #x00 "BVEC_SUBTAG" "BVEC_SUBTAG" "$tag.bytevector-typetag")
(define-const str-subtag   #x04 "STR_SUBTAG" "STR_SUBTAG" "$tag.string-typetag")
(define-const flo-subtag   #x08 "FLO_SUBTAG" "FLO_SUBTAG" "$tag.flonum-typetag")
(define-const comp-subtag  #x0C "COMP_SUBTAG" "COMP_SUBTAG" "$tag.compnum-typetag")
(define-const big-subtag   #x10 "BIG_SUBTAG" "BIG_SUBTAG" "$tag.bignum-typetag")
; FIXME: this is temporary, until ustrings become strings
(define-const ustr-subtag   #x14 "USTR_SUBTAG" "USTR_SUBTAG" "$tag.ustring-typetag")

; headers constructed from generic headers and header tags.

(define-const compnum-hdr (+ bv-hdr comp-subtag) 
  "COMPNUM_HDR" "COMPNUM_HDR" "$hdr.compnum")
(define-const flonum-hdr  (+ bv-hdr flo-subtag) 
  "FLONUM_HDR" "FLONUM_HDR" "$hdr.flonum")
(define-const bignum-hdr  (+ bv-hdr big-subtag) 
  "BIGNUM_HDR" "BIGNUM_HDR" "$hdr.bignum")
(define-const ratnum-hdr  (+ vec-hdr rat-subtag) 
  "RATNUM_HDR" "RATNUM_HDR" "$hdr.ratnum")
(define-const rectnum-hdr (+ vec-hdr rect-subtag) 
  "RECTNUM_HDR" "RECTNUM_HDR" "$hdr.rectnum")
(define-const string-hdr (+ bv-hdr str-subtag) 
  "STR_HDR" "STR_HDR" "$hdr.string")
; FIXME: this is temporary, until ustrings become strings
(define-const ustring-hdr (+ bv-hdr ustr-subtag) 
  "USTR_HDR" "USTR_HDR" "$hdr.ustring")
(define-const bytevector-hdr (+ bv-hdr bvec-subtag) 
  "BYTEVECTOR_HDR" "BYTEVECTOR_HDR" "$hdr.bytevector")
(define-const vector-hdr (+ vec-hdr vec-subtag) 
  "VECTOR_HDR" "VECTOR_HDR" "$hdr.vector")
(define-const procedure-hdr (+ proc-hdr 0)
  "PROCEDURE_HDR" "PROCEDURE_HDR" "$hdr.procedure")
(define-const symbol-hdr (+ vec-hdr sym-subtag) 
  "SYMBOL_HDR" "SYMBOL_HDR" "$hdr.symbol")
(define-const port-hdr   (+ vec-hdr port-subtag) 
  "PORT_HDR" "PORT_HDR" "$hdr.port")
(define-const struct-hdr (+ vec-hdr struct-subtag) 
  "STRUCT_HDR" "STRUCT_HDR" "$hdr.struct")

;;; System constants

; Number of words used for object header, for various types of structures.

(define-const wordsize 4 "WORDSIZE" "WORDSIZE" "$bytewidth.wordsize")
(define-const code-align 4 #f #f "$bytewidth.code-align")
(define-const char-shift 8 #f #f "$bitwidth.char-shift")

(define-const vec-header-words 1 "VEC_HEADER_WORDS" "VEC_HEADER_WORDS" #f)

(define-const bvec-header-words 1 "BVEC_HEADER_WORDS" "BVEC_HEADER_WORDS" #f)

(define-const bvec-header-bytes (* wordsize bvec-header-words)
  "BVEC_HEADER_BYTES" "BVEC_HEADER_BYTES" "$bytevector.header-bytes")

(define-const min-fixnum -536870912 "MOST_NEGATIVE_FIXNUM" #f #f)
(define-const max-fixnum 536870911 "MOST_POSITIVE_FIXNUM" #f #f)


;;; Data structure offsets
;;; FIXME: really depend on above system constants.

; Heap continuation offsets from start of vector header.

(define-action assembly (lambda (x) (* x 4)))
(define-action scheme (lambda (x) (* x 4)))

(define-const hc-header    0 "HC_HEADER" "HC_HEADER" #f)
(define-const hc-retoffset 1 "HC_RETOFFSET" "HC_RETOFFSET" #f)
(define-const hc-dynlink   2 "HC_DYNLINK" #f #f)
(define-const hc-proc      3 "HC_PROC" #f #f)
(define-const hc-saved     hc-proc "HC_SAVED" #f #f)

; Number of "overhead" words in a heap continuation. This does not include
; the saved procedure pointer, since it belongs to the "saved" values.

(define-const hc-overhead  3 "HC_OVERHEAD" #f #f)

; Stack continuation offsets (from stack pointer)


(define-const stk-contsize  1 "STK_CONTSIZE" "STK_CONTSIZE" "$stk.contsize")
(define-const stk-retaddr   0 "STK_RETADDR"  "STK_RETADDR"  "$stk.retaddr")
(define-const stk-dynlink   2 "STK_DYNLINK"  "STK_DYNLINK"  "$stk.dynlink")
(define-const stk-proc      3 "STK_PROC"     "STK_PROC"     "$stk.proc")
(define-const stk-reg0      3 "STK_REG0"     "STK_REG0"     "$stk.reg0")
(define-const stk-saved     stk-proc "STK_SAVED" "STK_SAVED" #f)

; Ditto overhead for stack continuation

(define-const stk-overhead 3 "STK_OVERHEAD" "STK_OVERHEAD" "$stk.overhead")

;; Buffer space between stack cache and nursery
(define-const sh-buffer    64 "SCE_BUFFER" "SCE_BUFFER" "$sce.buffer")

(define-action assembly (lambda (x) x)) 
(define-action scheme (lambda (x) x)) 

;;; Procedures
;;;
;;; The proc-* are word offsets from the start of the header.
;;; The idx-proc-* are word offsets from the end of the header.

; Number of words of header.
(define-const proc-header-words 1 "PROC_HEADER_WORDS" "PROC_HEADER_WORDS" "$proc.header-words")

; Number of data slots not used for saving registers. (code and constants)
(define-const proc-overhead  2 "PROC_OVERHEAD" "PROC_OVERHEAD_WORDS" "$proc.overhead-words")

; Indices of key data slots.
(define-const idx-proc-code  0 "IDX_PROC_CODE" #f #f)
(define-const idx-proc-const 1 "IDX_PROC_CONST" #f #f)
(define-const idx-proc-reg0  2 "IDX_PROC_REG0" #f #f)

(define-action scheme (lambda (x) (* 4 x)))

; Raw offsets of key data slots.
(define-const proc-codeptr   (+ proc-header-words idx-proc-code)
  "PROC_CODEPTR" #f "$proc.codevector")
(define-const proc-constants (+ proc-header-words idx-proc-const)
  "PROC_CONSTANTS" #f "$proc.constvector")
(define-const proc-reg0      (+ proc-header-words idx-proc-reg0)
  "PROC_REG0" "PROC_REG0" "$proc.reg0")

(define-action scheme (lambda (x) x))

; The following is pretty much a mess.
;
; offsets into various data structures from the start of the header (if any),
; both adjusted and unadjusted for the tag. [Does anyone use these any more?]

(define-const car-offset     0 #f "CAR_OFFSET" #f)
(define-const cdr-offset     4 #f "CDR_OFFSET" #f)
(define-const vec-offset     4 #f "VEC_OFFSET" #f)

(define-const a-car-offset   (- car-offset pair-tag) #f "A_CAR_OFFSET" #f)
(define-const a-cdr-offset   (- cdr-offset pair-tag) #f "A_CDR_OFFSET" #f)
(define-const a-vec-offset   (- vec-offset vec-tag)  #f "A_VEC_OFFSET" #f)

(define-const a-proc-offset  (- 4 proc-tag) #f "A_PROC_OFFSET" #f)

(define-const codevector     4 #f "CODEVECTOR" #f)
(define-const constvector    8 #f "CONSTVECTOR" #f)
(define-const a-codevector   (- 4 proc-tag) #f "A_CODEVECTOR" "$p.codevector")
(define-const a-constvector  (- 8 proc-tag) #f #f "$p.constvector")
(define-const a-linkoffset   (- 12 proc-tag) #f #f "$p.linkoffset")
(define-const codeoffset     4 #f "CODEOFFSET" #f)
(define-const reg0           a-linkoffset #f #f "$p.reg0")
(define-const a-codeoffset   (- 4 bvec-tag) #f "A_CODEOFFSET" "$p.codeoffset")

; Global cells are pairs

(define-const global-cell-tag pair-tag #f "GLOBAL_CELL_TAG" #f)
(define-const cell-value-offset car-offset #f "CELL_VALUE_OFFSET" #f)

; eof

