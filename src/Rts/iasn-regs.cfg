; Copyright 1998 Lars T Hansen.
;
; $Id: regs.cfg 3390 2006-08-24 19:42:42Z tov $
;
; Configuration file for Intel register names.

(define-files #f "regs.ah" "regs.sch")

(define-action scheme (lambda (x) (list 'quote x)))

(define-const $r.eax    'eax #f #f "$r.eax")
(define-const $r.ebx    'ebx #f #f "$r.ebx")
(define-const $r.ecx    'ecx #f #f "$r.ecx")
(define-const $r.edx    'edx #f #f "$r.edx")
(define-const $r.al     'al  #f #f "$r.al")
(define-const $r.bl     'bl  #f #f "$r.bl")
(define-const $r.cl     'cl  #f #f "$r.cl")
(define-const $r.dl     'dl  #f #f "$r.dl")
(define-const $r.edi    'edi #f #f "$r.edi")
(define-const $r.esi    'esi #f #f "$r.esi")
(define-const $r.esp    'esp #f #f "$r.esp")
(define-const $r.ebp    'ebp #f #f "$r.ebp")

(define-action scheme (lambda (x) (string-append "$r." x)))

(define-const temp       "eax" #f "TEMP"        "$r.temp")       ; always same as SECOND
(define-const temp.low   "al"  #f "TEMP_LOW"    "$r.temp.low")
(define-const second     "eax" #f "SECOND"      "$r.second")     ; always same as TEMP
(define-const second.low "al"  #f "SECOND_LOW"  "$r.second.low")
(define-const result     "ebx" #f "RESULT"      "$r.result")
(define-const result.low "bl"  #f "RESULT_LOW"  "$r.result.low")
(define-const reg1       "ecx" #f "REG1"        "$r.reg1")       ; ecx must map to a VM register
(define-const reg1.low   "cl"  #f "REG1_LOW"    "$r.reg1.low")
(define-const reg2       "edx" #f "REG2"        "$r.reg2")
(define-const reg2.low   "dl"  #f "REG2_LOW"    "$r.reg2.low")
(define-const reg3       "edi" #f "REG3"        "$r.reg3")       ; edi must map to a VM register
(define-const reg0       "esi" #f "REG0"        "$r.reg0")       ; on Petit/NASM, esi is REG4...
(define-const globals    "ebp" #f "GLOBALS"     "$r.globals")
(define-const cont       "esp" #f "CONT"        "$r.cont")

;; Must keep regaliases in sync with mappings at the top of the file

(define-action scheme (lambda (x) (string-append "$g." x)))

(define-const g-regalias-ecx "reg1"   #f #f "$g.regalias-ecx")
(define-const g-regalias-edi "reg3"   #f #f "$g.regalias-edi")
(define-const g-regalias-edx "reg2"   #f #f "$g.regalias-edx")
(define-const g-regalias-ebx "result" #f #f "$g.regalias-ebx")

; eof
